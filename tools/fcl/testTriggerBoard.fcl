# FHiCL document used to run the "driver" executable. To learn more
#  about the FHiCL language, please look at
#  cdcvs.fnal.gov/redmine/documents/327 , the "FHiCL Quick Start Guide"

events_to_generate: 2
run_number: 101
transition_timeout: 30
debug_cout: false

fragment_receiver: {

   # Parameters defining and configuring the fragment generator to be used
   		    
   generator: TriggerBoardReader
   fragment_type: TOY2        # Make sure downstream modules know about this fragment_type!
   board_address: "np04-trig-proto"
   # board_address: "np04-ctb-1"
   receiver_port : 8992 
   # calibration_stream_output : /nfs/sw/work_dirs/dune-artdaq_trigger_fragment_generator  ## this is the string that points to a writable directory if 
                                                                                         ## if this option is not there, there won't be a calibration str
   # calibration_update : 5. ## minimum amont of minutes that before updating the calibration stream file. Default 5 minutes

   group_size : 50    ## this sets how many pakages from the board should be grouped to form a fragment. Default 1 
   rollover :  50000  ## maximum number of board clock cycles before sending a package. Default 50000 

   

   # request_window_offset: 2 # Request message contains tzero. Window will be from tzero - offset to tz-o + width
   # request_window_width: 5 # These settings correspond to "two before, two after"

											
   nADCcounts: 100
   throttle_usecs: 100000  # Wait this many usecs before creating the next event
   distribution_type: 1

   # Parameters configuring the fragment generator's parent class
   # artdaq::CommandableFragmentGenerator

   fragment_ids: [0]  # In the case of just one fragment, "fragment_id: 0" would also work
   board_id: 999 
}  		  

event_builder: {

  expected_fragments_per_event: 1
  max_fragment_size_bytes: 100000000
  buffer_count: 10
  use_art: true
  print_event_store_stats: false
  verbose: true
}

######################################################################
# The ART code
######################################################################

physics:
{
  analyzers:
  {
  
  # n.b. if you wish to generate more than one fragment per event, toyDump should be disabled

    toyDump:
    {
      module_type: ToyDump
      raw_data_label: daq
      frag_type: @local::fragment_receiver.fragment_type
      num_adcs_to_show: 10   # Obviously this should be no more than ADC counts per fragment
    }

    printBuildInfo: {
      module_type: PrintBuildInfo 
      buildinfo_module_label: BuildInfo 
      buildinfo_instance_label: DuneArtdaq 
    }

  }

  producers:
  {
    BuildInfo:
    {
     module_type: DuneArtdaqBuildInfo
     instance_name: DuneArtdaq
    }
  }   


  p0: [ BuildInfo ] 

  a0: [ printBuildInfo]

  a1: [ toyDump ]

  e1: [ out1, rootout ]

  end_paths: [ a1, e1, p0, a0]
}

outputs:
{
  out1:
  {
    module_type: FileDumperOutput
    wantProductFriendlyClassName: true
  }

  rootout:
  {
    module_type: RootOutput
    fileName: "driver.root"
    compressionLevel: 0
  }

}

source:
{
module_type: DuneInput
waiting_time: 900
resume_after_timeout: true
}

process_name: Driver



