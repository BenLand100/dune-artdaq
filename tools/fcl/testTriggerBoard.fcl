# FHiCL document used to run the "driver" executable. To learn more
#  about the FHiCL language, please look at
#  cdcvs.fnal.gov/redmine/documents/327 , the "FHiCL Quick Start Guide"

events_to_generate: 2
run_number: 101
transition_timeout: 30
debug_cout: true 

fragment_receiver: {

   # Parameters defining and configuring the fragment generator to be used
   		    
   generator: TriggerBoardReader
   fragment_type: TOY2        # Make sure downstream modules know about this fragment_type!

   ##------------------------------------------------------------------------------
   ## Variable of interest for the new CTB Fragment Generator
   ##------------------------------------------------------------------------------

   #board_address: "np04-trig-proto"                   ## Default np04-ctb-1 
   board_address: "np04-ctb-1"

   control_port  : 8991                               ## Default 8991 
   
   calibration_stream_output : "/nfs/home/np04daq/TriggerBoardCalibrationStreams"     ## this is the string that points to a writable directory if 
                                                      ## if this option is not there, there won't be a calibration str
   # calibration_update : 5. ## minimum amont of minutes that before updating the calibration stream file. Default 5 minutes

   ## ------------------------------------------------------------------------
   ## conditions to trigger a fragment generator. 
   ## ------------------------------------------------------------------------
   ## Ideally a fragment is created whenever a certain number of packages from the board is received. 
   ## Packages in this context means everything between a TS word and the next, as they are regular in time. 
   ## This minimum number of packages is called group_size and it's default value is 1 .
   ## This option can be disabled simply requesting groupd_size = 0. In that case the fragment will contain all the 
   ## words present in the buffer at the moment of getNext_() call without restrictions based on the number of TS words .
   ## Anyway, to avoid the saturation of the buffers, a fragment is ALWAYS created whenever the number of words in the 
   ## buffer is bigger than than max_words_per_frag. 

   group_size : 30    ## this sets how many pakages from the board should be grouped to form a fragment. Default 1 
   	      	      ## value 0 means that the fragments contains all the word contained in the buffer at the moment of getNext_() call
                      ## without restriction based on the number of TS words. 

   max_words_per_frag : 3000 ## default 80 % of the capacity of the words buffer
                          

   max_frags_per_call : 3 ## this sets the maximum number of fragments to be returned for each getNext_() call. Default 10 

   # request_mode: "Window"   # the other interist possibility which is discussed is the "Buffer" mode
   # request_window_offset: 2 # Request message contains tzero. Window will be from tzero - offset to tz-o + width
   # request_window_width: 5  # These settings correspond to "two before, two after"

   board_config : '{
     "ctb":{
      "sockets":{
	"receiver":{
	  "rollover":50000,
	  "port":8992
      },
      "monitor":{
	"enable" : false,
      	"host": "localhost",
        "port": 8993
      },
      "statistics": {
        "enable":false,
        "port":8994,
        "updt_period": 1
      }
    },
    "misc":{
      "randomtrigger":{
      "enable":true,
      "frequency":1650000
    },
        "pulser":{
          "enable":true,
          "frequency":100
        },
        "timing":{
          "address":"0x0",
          "group":"0x0"
        }
      },
      "HLT":{
        "trigger": [
          { "id":"HLT_0",
            "description": "Beam trigger w/ CRT veto around beam pipe (for now BI test HLT)",
            "enable":false,
            "minc" : "0x1",
            "mexc" : "0x2"
          },
          { "id":"HLT_1",
            "description": "Beam trigger w/ CRT veto around beam pipe",
            "enable":false,
            "minc" : "0xFFFF",
            "mexc" : "0xFFFF"
          },
        { "id":"HLT_2",
          "description": "Beam trigger w/ CRT veto around beam pipe and Cherenkov PId",
          "enable":false,
          "minc" : "0x1",
          "mexc" : "0x6"
        },
        { "id":"HLT_3",
          "description": "Muon halo with CRT and PDS",
          "enable":true,
          "minc" : "0x31",
          "mexc" : "0x31"
        },
        { "id":"HLT_4",
          "description": "Cosmic through-going muon on Jura side",
          "enable":false,
          "minc" : "0x0",
          "mexc" : "0x31"
        }
      ]
    },
    "subsystems":{
      "pds":{
        "channel_mask":"0x100000",
        "reshape_length" : 1,
        "delays":[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,100,100,100],
        "dac_thresholds":[2250,2250,2250,2250,2250,2250,2250,2250,2250,2250,2250,2250,2250,2250,2250,2250,2250,2250,2250,2250,2250,2250,2250, 2250],
        "triggers": [
          { "id":"LLT_14",
            "description": "Counting trigger on the PDS",
            "enable":true,
            "mask" : "0xFFFFFFFF",
            "type" : "0x4",
            "count" : "0x5"
          }
        ]
      },
      "crt":{
        "channel_mask": "0xFFFFFFFF",
        "reshape_length" : 1,
        "delays":[100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,0,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100],
        "triggers": [
          { "id":"LLT_11",
            "description": "Counting trigger on the PDS",
            "enable":true,
            "mask" : "0xFFFFFFFF",
            "type" : "0x1",
            "count" : "0x0"
          },
          { "id":"LLT_12",
            "description": "Counting trigger on the PDS",
            "enable":true,
            "mask" : "0xFFFFFF",
            "type" : "0x1",
            "count" : "0x0"
          },
          { "id":"LLT_13",
            "description": "Counting trigger on the PDS",
            "enable":true,
            "mask" : "0x31",
            "type" : "0x4",
            "count" : "0x5"
          },
          { "id":"LLT_15",
            "description": "Counting trigger on the PDS",
            "enable":true,
            "mask" : "0x31",
            "type" : "0x4",
            "count" : "0x5"
          },
          { "id":"LLT_16",
            "description": "Counting trigger on the PDS",
            "enable":true,
            "mask" : "0xFFFEFFFF",
            "type" : "0x4",
            "count" : "0x5"
          }
        ]
      },
      "beam":{
        "channel_mask": "0x1FF",
        "reshape_length" : 0,
        "delays":[1,1,0,0,0,0,0,0,0],
        "triggers": [
          { "id":"LLT_1",
            "description": "Beam particle trigger",
            "enable":true,
            "mask" : "0x67"
          },
          { "id":"LLT_3",
            "description": "Beam particle trigger",
            "enable":true,
            "mask" : "0x65"
          },
          { "id":"LLT_4",
            "description": "Beam particle trigger",
            "enable":true,
            "mask" : "0xFF"
          },
          { "id":"LLT_5",
            "description": "Beam particle trigger",
            "enable":true,
            "mask" : "0x100"
          },
          { "id":"LLT_6",
            "description": "Beam particle trigger",
            "enable":true,
            "mask" : "0x2"
          }
        ]
      }
    }
  }
}'

							
   ##------------------------------------------------------------------------------
				
   nADCcounts: 100
   throttle_usecs: 100  # Wait this many usecs before creating the next event
   distribution_type: 1

   # Parameters configuring the fragment generator's parent class
   # artdaq::CommandableFragmentGenerator

   fragment_ids: [0]  # In the case of just one fragment, "fragment_id: 0" would also work
   board_id: 999 
}  		  

event_builder: {

  expected_fragments_per_event: 1
  max_fragment_size_bytes: 100000000
  buffer_count: 10
  use_art: true
  print_event_store_stats: false
  verbose: true
}

######################################################################
# The ART code
######################################################################

physics:
{
  analyzers:
  {
  
  # n.b. if you wish to generate more than one fragment per event, toyDump should be disabled

    toyDump:
    {
      module_type: ToyDump
      raw_data_label: daq
      frag_type: @local::fragment_receiver.fragment_type
      num_adcs_to_show: 10   # Obviously this should be no more than ADC counts per fragment
    }

    printBuildInfo: {
      module_type: PrintBuildInfo 
      buildinfo_module_label: BuildInfo 
      buildinfo_instance_label: DuneArtdaq 
    }

  }

  producers:
  {
    BuildInfo:
    {
     module_type: DuneArtdaqBuildInfo
     instance_name: DuneArtdaq
    }
  }   


  p0: [ BuildInfo ] 

  a0: [ printBuildInfo]

  a1: [ toyDump ]

  e1: [ out1, rootout ]

  end_paths: [ a1, e1, p0, a0]
}

outputs:
{
  out1:
  {
    module_type: FileDumperOutput
    wantProductFriendlyClassName: true
  }

  rootout:
  {
    module_type: RootOutput
    fileName: "driver.root"
    compressionLevel: 0
  }

}

source:
{
module_type: DuneInput
waiting_time: 900
resume_after_timeout: true
}

process_name: Driver



