////////////////////////////////////////////////////////////////////////
// Class:       TriggerSelector
// Module Type: filter
// File:        TriggerSelector_module.cc
//
// Generated at Fri Dec  5 10:21:00 2014 by Jonathan Davies using artmod
// from cetpkgsupport v1_07_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include <memory>
#include <iostream>
#include <iomanip>
#include <bitset>
#include <sstream>

#include "artdaq-core/Data/Fragments.hh"
#include "lbne-raw-data/Overlays/PennMilliSliceFragment.hh"
#include "lbne-raw-data/Overlays/Utilities.hh"

namespace trig {
  class TriggerSelector;
}

class trig::TriggerSelector : public art::EDFilter {
public:
  explicit TriggerSelector(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  TriggerSelector(TriggerSelector const &) = delete;
  TriggerSelector(TriggerSelector &&) = delete;
  TriggerSelector & operator = (TriggerSelector const &) = delete;
  TriggerSelector & operator = (TriggerSelector &&) = delete;
  void beginJob();

  // Required functions.
  bool filter(art::Event & evt) override;
  void printParams();

private:

  int fNumTriggers;
  std::vector<std::string> fTriggerModuleLabels;
  std::vector<std::string> fTriggerInstanceNames;
  bool fKeepNextEvent;
  bool fLastEventDecision;

};


void trig::TriggerSelector::beginJob(){
  printParams();
}

trig::TriggerSelector::TriggerSelector(fhicl::ParameterSet const & p)
// Initialize member data here.
{
  fNumTriggers = p.get<int>("NumTriggers", 0);
  for(int i=0; i<fNumTriggers;i++){
    std::ostringstream trig_config_name;
    trig_config_name << "trig_" << i;
    std::string triggerModuleLabel = p.get<std::string>(trig_config_name.str() + ".module_label");
    fTriggerModuleLabels.push_back(triggerModuleLabel);
    std::string triggerInstanceName = p.get<std::string>(trig_config_name.str() + ".instance_name");
    fTriggerInstanceNames.push_back(triggerInstanceName);
  }
  fKeepNextEvent = p.get<bool>("KeepNextEvent", true);
  fLastEventDecision = false;
}

void trig::TriggerSelector::printParams(){

  std::ostringstream my_ostringstream;
  for(int i=0;i<80;i++) my_ostringstream << "=";
  my_ostringstream << std::endl;
  my_ostringstream << "fNumTriggers: " << fNumTriggers << std::endl;

  //ART should throw an exception when the Nth trigger can't be found in the fcl parameter set
  //Just in case we should catch problems here
  for(int i=0;i<fNumTriggers;i++){
    my_ostringstream << "trig_" << i << std::endl;
    std::string ModuleLabel;
    std::string InstanceName;
    try{ 
      ModuleLabel = fTriggerModuleLabels.at(i);
    }
    catch(...){
      my_ostringstream << "ERROR -"
		       << " fNumTriggers: " << fNumTriggers
		       << " fTriggerModuleLabels.size(): " << fTriggerModuleLabels.size()
		       << std::endl;

      throw(my_ostringstream.str());
    }
    try{ 
      InstanceName = fTriggerInstanceNames.at(i);
    }
    catch(...){
      my_ostringstream << "ERROR -"
		       << " fNumTriggers: " << fNumTriggers
		       << " fTriggerInstanceNames.size(): " << fTriggerInstanceNames.size()
		       << std::endl;

      throw(my_ostringstream.str());
    }

    my_ostringstream << "fTriggerModuleLabels.at(" << i << "): " << ModuleLabel << std::endl;
    my_ostringstream << "fTriggerInstanceNames.at(" << i << "): " << InstanceName << std::endl;
  }

  for(int i=0;i<80;i++) my_ostringstream << "=";
  my_ostringstream << std::endl;

  std::cerr << my_ostringstream.str();

}

bool trig::TriggerSelector::filter(art::Event & evt)
{
  int numTriggersPassed=0;
  art::Handle<bool> triggerResults;
  std::ostringstream my_ostringstream;
  for(int i=0;i<fNumTriggers;i++){
    my_ostringstream << "Looking for: " << fTriggerModuleLabels.at(i)
		     << " - " << fTriggerInstanceNames.at(i) << std::endl;
    evt.getByLabel(fTriggerModuleLabels.at(i), fTriggerInstanceNames.at(i), triggerResults);
    if(triggerResults.isValid()){
      my_ostringstream << "Found it" << std::endl;
      if(*triggerResults){
	my_ostringstream << "PASS" << std::endl;
	numTriggersPassed++;
      }
      else my_ostringstream << "FAIL" << std::endl;
    }//isValid
    else  my_ostringstream << "ERROR - Not found it" << std::endl;
  }//triggers

  std::cerr << my_ostringstream.str();

  if(fNumTriggers == numTriggersPassed){
    std::cerr << "PASS event " << evt.id() << std::endl;
    fLastEventDecision = true;
    return true;
  }
  else if(fLastEventDecision == true){
    std::cerr << "PASS event " << evt.id() << " as last event was passed" << std::endl;
    fLastEventDecision = false;
    return true;
  }
  else{
    fLastEventDecision = false;
    return false;
  }
}


DEFINE_ART_MODULE(trig::TriggerSelector)
