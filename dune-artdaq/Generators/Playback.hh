#ifndef dune_artdaq_Generators_Playback_hh
#define dune_artdaq_Generators_Playback_hh

// JCF, Jun-4-2016

// "Playback" is a fragment generator which, when given a list of
// *.root files previously output during the running of 35ton, will
// extract fragments from them and send them downstream as if they
// were being generated by hardware. 

#include "dune-raw-data/Overlays/FragmentType.hh"

#include "artdaq-core/Data/Fragments.hh" 
#include "artdaq/Application/CommandableFragmentGenerator.hh"

#include "gallery/Event.h"
#include "fhiclcpp/fwd.h"

#include <vector>
#include <string>

using namespace dune;

namespace dune {    

  class Playback : public artdaq::CommandableFragmentGenerator {
  public:
    explicit Playback(fhicl::ParameterSet const & ps);
    ~Playback() = default;

    using FT = detail::FragmentType;

  private:

    bool getNext_(artdaq::FragmentPtrs & output) override;

    void start() override {}
    void stop() override {}
    void stopNoMutex() override {}

    // "possible_fragment_types_" not declared static as I'd prefer
    // this initialized in the *.hh file...

    const std::vector<FT> possible_fragment_types_ = { 
      FT::TOY1, FT::TOY2, FT::TPC, FT::PHOTON, FT::TRIGGER };

    // FHiCL-settable parameters

    std::size_t throttle_usecs_; // Pause in microseconds on every
				 // call to getNext
    bool driver_mode_; // Set this to true if running off driver

    const std::string input_file_list_; // Name of the file listing input root files

    bool force_sequential_; // For out-of-order events in input files, reset their sequence IDs

    const std::string fragment_type_; // Type of the fragment corresponding to the fragment ID

    // Internal parameters

    std::unique_ptr<std::ifstream> input_file_;
    std::istream_iterator< std::string > input_file_iter_;
    std::vector<std::string> input_root_filenames_;
    std::unique_ptr<gallery::Event> events_;
  };

}

#endif /* dune_artdaq_Generators_Playback_hh */
